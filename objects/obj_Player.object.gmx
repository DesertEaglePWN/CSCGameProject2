<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerIdle</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Player
playerGravity = 2;

movementSpeed = 3;
horizontalSpeed = 0;
verticalSpeed = 0;
jumpSpeed =  10;
image_speed = .2;

// -1 In Use
// 0 Cannot Use
// 1 Ready To Use 
canJump = 1;

//0 Left Facing
//1 Right Facing
playerDirection = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>5 * room_speed</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>11</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>show_message(canJump);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Jump Alarm
if (canJump == -1)
{
    //If Jumping, start falling
    canJump = 0;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Process Player Input
keyMoveLeft = (keyboard_check(ord('A')) || keyboard_check(vk_left));
keyMoveRight = keyboard_check(ord('D')) || keyboard_check(vk_right);
keyJump = keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_space);
keyFire = mouse_check_button(1) || keyboard_check(ord('J'));
pressedJump = keyboard_check_pressed(ord('W')) || keyboard_check_pressed(vk_space);
pressedFire = mouse_check_button_pressed(1) || keyboard_check_pressed('J');


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Execute Player Movement

//
horizontalSpeed = (-keyMoveLeft + keyMoveRight) * movementSpeed;




if (place_meeting(x+horizontalSpeed, y, obj_Collision))
{
    while(!place_meeting(x+sign(horizontalSpeed),y,obj_Collision))
    {
        //Slide over one pixel at a time until collision occurs
        x += 1
    }
    horizontalSpeed = 0;
}
else
{   //Update Player Position
    x += horizontalSpeed; 
}

if (place_meeting(x, y + verticalSpeed, obj_Collision))
{
    show_debug_message(verticalSpeed)
    while(!place_meeting(x,y+sign(verticalSpeed),obj_Collision))
    {
        //Drop one pixel at a time until collision occurs
        y += 1;
    }
    verticalSpeed = 0;
}
else
{   //Update Player Position
    y += verticalSpeed;
}

if (place_meeting(x, y+1, obj_Collision)) 
{
    //Standing on a Solid Surface
    canJump = 1;
    verticalSpeed = keyJump * -jumpSpeed;
    
    if (pressedJump &amp;&amp; (canJump == 1))
    {
        //Start Jumping
        canJump = -1; 
        alarm[0] = .1 * room_speed;
    }
}
else
{
    //Falling
    //Limit Player Gravity
    canJump = 0;
    if (verticalSpeed &lt; 12) verticalSpeed += playerGravity;  
}

if(canJump = -1)
{
    //Jumping
    verticalSpeed -= jumpSpeed;
}



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///UpdatePlayerSprite
moving = (-keyMoveLeft + keyMoveRight);
if (moving != 0)
{
    //Moving
    image_xscale = moving;
}

if (place_meeting(x, y+1, obj_Collision))
{
    //Standing On Solid Ground
    if (moving != 0) 
    {
        sprite_index = spr_PlayerRun;
    }
    else
    {
        sprite_index = spr_PlayerIdle;
    }
}
else
{
    //In The Air
    if (canJump == -1)
    {
        //Jumping
        sprite_index = spr_PlayerJump;
    }
    else if (canJump == 0)
    {
        //Falling
        sprite_index = spr_PlayerFall;
    } 
    else
    {
        //Unknown
        sprite_index = spr_PlayerIdle;
    }
}



</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
